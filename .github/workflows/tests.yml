name: Comprehensive Test Suite
on:
  push:
    branches: [main, develop, chore/test-reset-cypress-storybook]
  pull_request:
    branches: [main]

env:
  NODE_ENV: test
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/herit_test

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: herit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [20.18.2]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: |
          # Wait for postgres to be ready
          while ! pg_isready -h localhost -p 5432; do
            echo "Waiting for postgres..."
            sleep 1
          done

          # Run database migrations
          pnpm db:migrate
          pnpm db:validate
        env:
          POSTGRES_URL: ${{ env.DATABASE_URL }}
          SESSION_SECRET: test-secret-for-ci-only-32-characters-minimum
          REFRESH_SECRET: test-refresh-secret-for-ci-only-32-chars

      - name: Type checking
        run: pnpm cli typecheck

      - name: Linting
        run: pnpm cli lint

      - name: Unit tests with coverage
        run: pnpm vitest run --coverage
        env:
          POSTGRES_URL: ${{ env.DATABASE_URL }}
          SESSION_SECRET: test-secret-for-ci-only-32-characters-minimum
          REFRESH_SECRET: test-refresh-secret-for-ci-only-32-chars

      - name: Build application
        run: pnpm build
        env:
          POSTGRES_URL: ${{ env.DATABASE_URL }}
          SESSION_SECRET: test-secret-for-ci-only-32-characters-minimum
          REFRESH_SECRET: test-refresh-secret-for-ci-only-32-chars

      - name: Component tests
        run: pnpm cli test:ct
        env:
          POSTGRES_URL: ${{ env.DATABASE_URL }}
          SESSION_SECRET: test-secret-for-ci-only-32-characters-minimum
          REFRESH_SECRET: test-refresh-secret-for-ci-only-32-chars

      - name: Build Storybook
        run: pnpm storybook:build

      - name: Storybook tests
        run: |
          npx concurrently -k -s first -n "SB,TEST" \
            "npx http-server storybook-static --port 6006 --silent" \
            "npx wait-on tcp:6006 && pnpm test-storybook --url http://localhost:6006"

      - name: Start application for E2E tests
        run: |
          pnpm start &
          npx wait-on http://localhost:3000
        env:
          POSTGRES_URL: ${{ env.DATABASE_URL }}
          SESSION_SECRET: test-secret-for-ci-only-32-characters-minimum
          REFRESH_SECRET: test-refresh-secret-for-ci-only-32-chars

      - name: E2E tests
        run: pnpm cli test:e2e
        env:
          POSTGRES_URL: ${{ env.DATABASE_URL }}
          SESSION_SECRET: test-secret-for-ci-only-32-characters-minimum
          REFRESH_SECRET: test-refresh-secret-for-ci-only-32-chars
          CYPRESS_BASE_URL: http://localhost:3000

      - name: Database audit verification
        run: pnpm cli test:db
        env:
          POSTGRES_URL: ${{ env.DATABASE_URL }}

      - name: Security audit
        run: pnpm audit --audit-level=high
        continue-on-error: true

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            .artifacts/
            cypress/videos/
            cypress/screenshots/
            coverage/
            test-results/
            storybook-static/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Separate job for dependency security checks
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.2
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          pnpm audit --audit-level=moderate --json > security-audit.json || true
          echo "Security audit completed, check artifacts for details"

      - name: Upload security audit
        uses: actions/upload-artifact@v4
        with:
          name: security-audit
          path: security-audit.json
